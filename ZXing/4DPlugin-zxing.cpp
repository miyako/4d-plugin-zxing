/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-zxing.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : zxing
 #	author : miyako
 #	2022/06/06
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-zxing.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- zxing
            
			case 1 :
				zxing_decode(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#define CONVERT_PICTURE  (1002)

static ZXing::Results pictureToImage(PA_Picture p) {
    
    ZXing::Results results;
    
    //convert picture
    PA_Variable args[3];
    args[0] = PA_CreateVariable(eVK_Picture);
    PA_SetPictureVariable(&args[0], p);
    args[1] = PA_CreateVariable(eVK_Unistring);
    PA_Unistring ustr = PA_CreateUnistring((PA_Unichar *)".\0b\0m\0p\0\0\0");
    PA_SetStringVariable(&args[1], &ustr);
    
    PA_ExecuteCommandByID(CONVERT_PICTURE, args, 2);
    
    p = PA_GetPictureVariable(args[0]);/* the picture has been converted */
    
    PA_SetPictureVariable(&args[0], NULL);
    
    PA_ClearVariable(&args[0]);
    PA_ClearVariable(&args[1]);
        
    PA_Handle h = PA_NewHandle(0);
    
    PA_ErrorCode err = eER_NoErr;
    PA_GetPictureData(p, 1, h);
    err = PA_GetLastError();
    
    if(err == eER_NoErr)
    {
        const uint8_t *data = (const uint8_t*)PA_LockHandle(h);
        size_t size = PA_GetHandleSize(h);
        int x, y, channels;
        
        void *buf = stbi_load_from_memory(data, size,
                                          &x,
                                          &y,
                                          &channels, 3);
        
        PA_UnlockHandle(h);
        
        if (buf != nullptr) {
            
#if VERSIONMAC
			ZXing::ImageView image((const uint8_t *)buf, x, y, ZXing::ImageFormat::RGB);
            results = ReadBarcodes(image);
#endif
#if VERSIONWIN
			results = { 
				ZXing::ReadBarcode(x, y, 
				(unsigned char *)buf, 
				x * 3, 
				3, 
				0, 1, 2,{}, true, true)
			};
#endif
            free(buf);
        }

    }
    
    PA_DisposeHandle(h);
    
    return results;
}

#pragma mark -

void zxing_decode(PA_PluginParameters params) {

    PA_Picture p = PA_GetPictureParameter(params, 1);
    
    p = PA_DuplicatePicture(p, 1);
    
    PA_ObjectRef status = PA_CreateObject();
    
    ZXing::Results results = pictureToImage(p);
    
    PA_CollectionRef col = PA_CreateCollection();
    
    for(auto it = results.begin(); it != results.end(); ++it) {
        
        ZXing::Result result = *it;
        
        PA_ObjectRef o = PA_CreateObject();
        
        switch (result.status()) {
            case ZXing::DecodeStatus::NoError:
                ob_set_s(o, L"status", "noError");
                break;
            case ZXing::DecodeStatus::NotFound:
                ob_set_s(o, L"status", "notFound");
                break;
            case ZXing::DecodeStatus::FormatError:
                ob_set_s(o, L"status", "formatError");
                break;
            case ZXing::DecodeStatus::ChecksumError:
                ob_set_s(o, L"status", "checksumError");
                break;
        }
        
        ob_set_a(o, L"text", result.text().c_str());

#if VERSIONMAC
		ob_set_s(o, L"symbologyIdentifier", result.symbologyIdentifier().c_str());
		ob_set_a(o, L"ecLevel", result.ecLevel().c_str());
		ob_set_s(o, L"sequenceId", result.sequenceId().c_str());
        ob_set_n(o, L"orientation", result.orientation());
		ob_set_n(o, L"sequenceSize", result.sequenceSize());
		ob_set_n(o, L"numBits", result.numBits());
#endif

        switch (result.format()) {
		case ZXing::BarcodeFormat::AZTEC:

			break;
		case ZXing::BarcodeFormat::CODABAR:

			break;
		case ZXing::BarcodeFormat::CODE_39:

			break;
		case ZXing::BarcodeFormat::CODE_93:

			break;
		case ZXing::BarcodeFormat::CODE_128:

			break;
		case ZXing::BarcodeFormat::DATA_MATRIX:

			break;
		case ZXing::BarcodeFormat::EAN_8:

			break;
		case ZXing::BarcodeFormat::EAN_13:

			break;
		case ZXing::BarcodeFormat::ITF:

			break;
		case ZXing::BarcodeFormat::MAXICODE:

			break;
		case ZXing::BarcodeFormat::PDF_417:

			break;
		case ZXing::BarcodeFormat::QR_CODE:

			break;
		case ZXing::BarcodeFormat::RSS_14:

			break;
		case ZXing::BarcodeFormat::RSS_EXPANDED:

			break;
		case ZXing::BarcodeFormat::UPC_A:

			break;
		case ZXing::BarcodeFormat::UPC_E:

			break;
		case ZXing::BarcodeFormat::UPC_EAN_EXTENSION:

			break;
			
#if VERSIONMAC
		case ZXing::BarcodeFormat::None:
			ob_set_s(o, L"format", "none");
			break;
		case ZXing::BarcodeFormat::Aztec:
			ob_set_s(o, L"format", "aztec");
			break;
		case ZXing::BarcodeFormat::Codabar:
			ob_set_s(o, L"format", "codabar");
			break;
		case ZXing::BarcodeFormat::Code39:
			ob_set_s(o, L"format", "code39");
			break;
		case ZXing::BarcodeFormat::Code93:
			ob_set_s(o, L"format", "code93");
			break;
		case ZXing::BarcodeFormat::Code128:
			ob_set_s(o, L"format", "code128");
			break;
		case ZXing::BarcodeFormat::DataBar:
			ob_set_s(o, L"format", "dataBar");
			break;
		case ZXing::BarcodeFormat::DataBarExpanded:
			ob_set_s(o, L"format", "dataBarExpanded");
			break;
		case ZXing::BarcodeFormat::DataMatrix:
			ob_set_s(o, L"format", "dataMatrix");
			break;
		case ZXing::BarcodeFormat::EAN8:
			ob_set_s(o, L"format", "EAN8");
			break;
		case ZXing::BarcodeFormat::EAN13:
			ob_set_s(o, L"format", "EAN13");
			break;
		case ZXing::BarcodeFormat::ITF:
			ob_set_s(o, L"format", "ITF");
			break;
		case ZXing::BarcodeFormat::MaxiCode:
			ob_set_s(o, L"format", "maxiCode");
			break;
		case ZXing::BarcodeFormat::PDF417:
			ob_set_s(o, L"format", "PDF417");
			break;
		case ZXing::BarcodeFormat::QRCode:
			ob_set_s(o, L"format", "QRCode");
			break;
		case ZXing::BarcodeFormat::UPCA:
			ob_set_s(o, L"format", "UPCA");
			break;
		case ZXing::BarcodeFormat::UPCE:
			ob_set_s(o, L"format", "UPCE");
			break;
#endif
        }
        
#if VERSIONMAC
        ob_set_b(o, L"isLastInSequence", result.isLastInSequence());
        ob_set_b(o, L"isMirrored", result.isMirrored());
        ob_set_b(o, L"isPartOfSequence", result.isPartOfSequence());
        ob_set_b(o, L"isValid", result.isValid());
        ob_set_n(o, L"lineCount", result.lineCount());

		auto positions = result.position();

		PA_CollectionRef corners = PA_CreateCollection();

		for (auto itt = positions.begin(); itt != positions.end(); ++itt) {

			ZXing::PointT<int> position = *itt;

			PA_ObjectRef corner = PA_CreateObject();
			ob_set_n(corner, L"x", position.x);
			ob_set_n(corner, L"y", position.y);

			PA_Variable vv = PA_CreateVariable(eVK_Object);
			PA_SetObjectVariable(&vv, corner);
			PA_SetCollectionElement(corners, PA_GetCollectionLength(corners), vv);
			PA_ClearVariable(&vv);

		}

		ob_set_c(o, L"corners", corners);
#endif

        PA_Variable v = PA_CreateVariable(eVK_Object);
        PA_SetObjectVariable(&v, o);
        PA_SetCollectionElement(col, PA_GetCollectionLength(col), v);
        PA_ClearVariable(&v);
    }
    
    ob_set_c(status, L"results", col);
    
    PA_ReturnObject(params, status);
}

